{"version":3,"sources":["serviceWorker.js","component/Loading.js","helper/Color.js","helper/index.js","component/Input.js","component/Output.js","component/Color.js","view/Home.js","index.js"],"names":["Boolean","window","location","hostname","match","Loading","className","this","isActive","props","active","React","Component","Color","r","g","b","R","Math","floor","G","B","that","toString","localeCompare","getImageColors","imgObj","canvas","document","createElement","width","naturalWidth","height","naturalHeight","ctx","getContext","drawImage","imageData","getImageData","data","colors","i","length","push","findTargetColors","sort","newColors","left","right","Input","file","createRef","onChange","bind","state","inputStyle","backgroundColor","backgroundImage","placeholderStyle","opacity","style","type","accept","ref","current","files","infile","startsWith","onStart","reader","FileReader","onload","e","setState","result","callback","img","src","getImage","imgColors","onResult","readAsDataURL","info","Output","background","color","Home","isLoading","hasOutput","map","key","Array","renderColor","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.34bf1dd1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport './Loading.styl';\r\n\r\nclass Loading extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className={`Loading ${this.isActive()}`}>\r\n        Processing...\r\n      </div>\r\n    );\r\n  }\r\n\r\n  isActive() {\r\n    return this.props.active ? 'active' : '';\r\n  }\r\n}\r\n\r\nexport default Loading;\r\n","class Color {\r\n  constructor(r, g, b) {\r\n    this.R = Math.floor(r);\r\n    this.G = Math.floor(g);\r\n    this.B = Math.floor(b);\r\n  }\r\n  localeCompare(that) {\r\n    return this.toString().localeCompare(that.toString());\r\n  }\r\n  toString() {\r\n    let r = (this.R < 16 ? '0' : '') + this.R.toString(16);\r\n    let g = (this.G < 16 ? '0' : '') + this.G.toString(16);\r\n    let b = (this.B < 16 ? '0' : '') + this.B.toString(16);\r\n    return `#${r}${g}${b}`;\r\n  }\r\n}\r\n\r\nexport default Color;","import Color from \"./Color\";\r\n\r\nexport function findTargetColors(colors) {\r\n  if (colors.length < 16) {\r\n    return colors.sort();\r\n  } else {\r\n    let newColors = [];\r\n    for (let i = 0; i < colors.length; i += 1) {\r\n      // get average for every pair of colors\r\n      let left = colors[i];\r\n      let right = colors[++i];\r\n      if (right) {\r\n        newColors.push(new Color(\r\n          (left.R + right.R) / 2,\r\n          (left.G + right.G) / 2,\r\n          (left.B + right.B) / 2\r\n        ));\r\n      } else {\r\n        newColors.push(left);\r\n      }\r\n    }\r\n    return findTargetColors(newColors);\r\n  }\r\n}\r\n\r\nexport function getImageColors(imgObj) {\r\n  let canvas = document.createElement('canvas');\r\n  canvas.width = imgObj.naturalWidth;\r\n  canvas.height = imgObj.naturalHeight;\r\n  let ctx = canvas.getContext('2d');\r\n  ctx.drawImage(imgObj, 0, 0);\r\n  let imgDataObj = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n  let imageData = imgDataObj.data;\r\n\r\n  let colors = [];\r\n  for (let i = 0; i < imageData.length; i += 1) {\r\n    // every 3 r/g/b values are filled into colors and every alpha value was skiped by the loop\r\n    let r = imageData[i++];\r\n    let g = imageData[i++];\r\n    let b = imageData[i++];\r\n    let a = imageData[i];\r\n    if (a > 0) { // remove transparent colors\r\n      colors.push(new Color(r, g, b));\r\n    }\r\n  }\r\n\r\n  return findTargetColors(colors);\r\n}\r\n\r\nexport function getImage(data, callback) {\r\n  let img = document.createElement('img');\r\n  img.onload = e => {\r\n    typeof callback === 'function' && callback(img);\r\n  };\r\n  img.src = data;\r\n}","import React from 'react';\r\nimport './Input.styl';\r\nimport { getImage, getImageColors } from '../helper';\r\n\r\nclass Input extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.file = React.createRef();\r\n    this.onChange = this.onChange.bind(this);\r\n    this.state = {\r\n      inputStyle: {\r\n        backgroundColor: 'white',\r\n        backgroundImage: 'none'\r\n      },\r\n      placeholderStyle: {\r\n        opacity: 1\r\n      }\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Input\" style={this.state.inputStyle}>\r\n        <div className=\"Input-placeholder\" style={this.state.placeholderStyle}>DRAG AN IMAGE HERE</div>\r\n        <input className=\"Input-file\" type=\"file\" accept=\"image/*\" ref={this.file} onChange={this.onChange} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  onChange() {\r\n    const file = this.file.current;\r\n    if (file.files.length) {\r\n      let infile = file.files[0];\r\n      if (infile.type.startsWith('image/')) {\r\n        this.onStart();\r\n        let reader = new FileReader();\r\n        reader.onload = e => {\r\n          this.setState({\r\n            inputStyle: {\r\n              backgroundColor: 'black',\r\n              backgroundImage: `url(${reader.result})`\r\n            },\r\n            placeholderStyle: {\r\n              opacity: 0\r\n            }\r\n          });\r\n\r\n          getImage(reader.result, imgObj => {\r\n            const imgColors = getImageColors(imgObj);\r\n            this.onResult(imgColors);\r\n          });\r\n        }\r\n        reader.readAsDataURL(infile);\r\n      } else {\r\n        this.onResult(-1);\r\n      }\r\n    } else {\r\n      this.onResult(-2);\r\n    }\r\n  }\r\n\r\n  onStart(info) {\r\n    if (typeof this.props.onStart === 'function') {\r\n      this.props.onStart(info);\r\n    }\r\n  }\r\n\r\n  onResult(result) {\r\n    if (typeof this.props.onResult === 'function') {\r\n      this.props.onResult(result);\r\n    }\r\n  }\r\n}\r\n\r\nexport default Input;\r\n","import React from 'react';\r\nimport './Output.styl';\r\n\r\nclass Output extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className={`Output ${this.isActive()}`}>{this.props.result}</div>\r\n    );\r\n  }\r\n\r\n  isActive() {\r\n    return this.props.active ? 'active' : '';\r\n  }\r\n}\r\n\r\nexport default Output;\r\n","import React from 'react';\r\nimport './Color.styl';\r\n\r\nclass Color extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Color\">\r\n        <span className=\"Color-color\" style={{ background: this.props.color || '#ffffff' }}></span>\r\n        <span className=\"Color-name\">{this.props.color || '#ffffff'}</span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Color;\r\n","import React from 'react';\nimport './Home.styl';\nimport Loading from \"../component/Loading\";\nimport Input from \"../component/Input\";\nimport Output from \"../component/Output\";\nimport Color from \"../component/Color\";\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      result: [],\n      isLoading: false,\n      hasOutput: false\n    };\n    this.onStart = this.onStart.bind(this);\n    this.onResult = this.onResult.bind(this);\n  }\n\n  render() {\n    return (\n      <div className=\"Home\">\n        <Input onStart={this.onStart} onResult={this.onResult} />\n        <Output active={this.state.hasOutput} result={this.state.result} />\n        <Loading active={this.state.isLoading} />\n      </div>\n    );\n  }\n\n  renderColor(result) {\n    return result.map((color, i) => (\n      <Color color={color.toString()} key={i} />\n    ));\n  }\n\n  onStart() {\n    this.setState({ isLoading: true });\n  }\n\n  onResult(result) {\n    if (result instanceof Array && result.length) {\n      this.setState({\n        result: this.renderColor(result),\n        isLoading: false,\n        hasOutput: true\n      });\n    } else {\n      this.setState({\n        result: [],\n        isLoading: false,\n        hasOutput: false\n      });\n    }\n  }\n}\n\nexport default Home;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.styl';\nimport * as serviceWorker from './serviceWorker';\nimport Home from './view/Home';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Home />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}